from dataclasses import dataclass

@dataclass
class Elemento:
    nombre: str

    def __eq__(self, otro):
        if isinstance(otro, Elemento):
            return self.nombre == otro.nombre
        return False
    
class Conjunto:
    contador=0
    def __init__(self,nombre:str):
        self.nombre=nombre
        self.__id=Conjunto.contador
        Conjunto.contador+=1
        self.elementos: list[Elemento] = []
        
    @property
    def id(self) -> int:
        return self.__id
    
    def contiene(self, elemento: Elemento) -> bool:
        return any(e == elemento for e in self.elementos)

    def agregar_elemento(self, elemento: Elemento):
        if not self.contiene(elemento):
            self.elementos.append(elemento)

    def unir(self, otro_conjunto: 'Conjunto'):
        for elemento in otro_conjunto.elementos:
            self.agregar_elemento(elemento)

    def __add__(self, otro_conjunto: 'Conjunto') -> 'Conjunto':
        resultado = Conjunto(f"{self.nombre} Unido {otro_conjunto.nombre}")
        resultado.elementos = self.elementos.copy()
        resultado.unir(otro_conjunto)
        return resultado

    @classmethod
    def intersectar(cls, conjunto1: 'Conjunto', conjunto2: 'Conjunto') -> 'Conjunto':
        nombre_resultado = f"{conjunto1.nombre} Intersectado {conjunto2.nombre}"
        elementos_interseccion = [elemento for elemento in conjunto1.elementos if conjunto2.contiene(elemento)]
        resultado = Conjunto(nombre_resultado)
        resultado.elementos = elementos_interseccion
        return resultado

    def __str__(self) -> str:
        elementos_str = ", ".join(elemento.nombre for elemento in self.elementos)
        return f"Conjunto {self.nombre}: ({elementos_str})"
